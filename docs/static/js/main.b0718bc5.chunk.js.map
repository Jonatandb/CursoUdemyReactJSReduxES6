{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constans/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","services/transformWeather.js","services/getURLByCity.js","constans/api_url.js","components/WeatherLocation/index.js","components/LocationList.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","className","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherExtraInfo","humidity","wind","WeatherData","data","transformWeather","weather_data","kelvin","main","temp","Number","convert","from","to","toFixed","weather","id","getWeatherState","speed","getURLByCity","WeatherLocation","props","handleUpdateClick","fetch","state","then","response","json","weatherJSONResponse","cod","setState","console","log","message","catch","reason","this","onClick","onWeatherLocationClick","CircularProgress","Component","LocationList","cities","onSelectedLocation","map","c","idx","key","handleSelectedLocation","App","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b0718bc5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\nconst Location = ({ city }) => {\r\n    return (\r\n        <div className=\"locationContainer\">\r\n            <h1>{city}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nLocation.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Location","import React from \"react\"\r\nimport WeatherIcons from \"react-weathericons\"\r\nimport {\r\n  CLOUD,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  THUNDER,\r\n  DRIZZLE,\r\n} from \"../../../constans/weathers\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./styles.css\"\r\n\r\n// Weather Icons:\r\n// --------------\r\n\r\n// \tWeather Icons sitio oficial:\r\n// \t\thttp://erikflowers.github.io/weather-icons/\r\n\r\n// \tReact Weather Icons:\r\n// \t\thttps://www.npmjs.com/package/react-weathericons\r\n\r\n// \tWeather Icons CDN:\r\n// \t\thttps://cdnjs.com/libraries/weather-icons\r\n\r\n// \t\tAgregar a index.html:\r\n// \t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.9/css/weather-icons.min.css\" />\r\n\r\nconst icons = {\r\n  // http://erikflowers.github.io/weather-icons/\r\n  [CLOUD]: \"cloud\",\r\n  [SUN]: \"day-sunny\",\r\n  [RAIN]: \"rain\",\r\n  [SNOW]: \"snow\",\r\n  [THUNDER]: \"day-thunderstore\",\r\n  [DRIZZLE]: \"day-showers\",\r\n}\r\n\r\nconst getWeatherIcon = (weatherState) => {\r\n  const icon = icons[weatherState]\r\n  const sizeIcon = \"4x\"\r\n\r\n  if (icon)\r\n    return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />\r\n  else return <WeatherIcons className=\"wicon\" name=\"meteor\" size={sizeIcon} />\r\n}\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => {\r\n  return (\r\n    <div className=\"weatherTemperatureContainer\">\r\n      {getWeatherIcon(weatherState)}\r\n      <span className=\"temperature\">{` ${temperature}`}</span>\r\n      <span className=\"temperatureType\">{` ºC`}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default WeatherTemperature\r\n","export const CLOUD = \"cloud\"\r\nexport const SUN = \"sun\"\r\nexport const RAIN = \"rain\"\r\nexport const SNOW = \"snow\"\r\nexport const THUNDER = \"thunder\" // Trueno\r\nexport const DRIZZLE = \"drizzle\" // Llovizna\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n    return (\r\n        <div className=\"weatherExtraInfoContainer\">\r\n            <span className=\"extraInfoText\">{`Humedad: ${humidity}% - `}</span>\r\n            <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n}\r\nexport default WeatherExtraInfo","import React from 'react'\r\nimport WeatherTemperature from './WeatherTemperature'\r\nimport WeatherExtraInfo from './WeatherExtraInfo'\r\nimport './styles.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\r\n    <div className=\"weatherDataContainer\">\r\n        <WeatherTemperature\r\n            temperature={temperature}\r\n            weatherState={weatherState}\r\n        />\r\n        <WeatherExtraInfo\r\n            humidity={humidity}\r\n            wind={wind}\r\n        />\r\n    </div>\r\n)\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    }),\r\n}\r\nexport default WeatherData","import convert from \"convert-units\"\r\nimport { SUN, DRIZZLE, THUNDER, RAIN, SNOW, CLOUD } from \"../constans/weathers\"\r\n\r\nconst getCelsius = (kelvin) =>\r\n  Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(2))\r\n\r\nconst getWeatherState = (weather) => {\r\n  const { id } = weather\r\n  if (id < 300) {\r\n    return THUNDER\r\n  } else if (id < 400) {\r\n    return DRIZZLE\r\n  } else if (id < 600) {\r\n    return RAIN\r\n  } else if (id < 700) {\r\n    return SNOW\r\n  } else if (id === 800) {\r\n    return SUN\r\n  } else {\r\n    return CLOUD\r\n  }\r\n}\r\n\r\nconst transformWeather = (weather_data) => {\r\n  // console.log(\r\n  //   \"transformWeather: Respuesta JSON recibida desde la API:\\n\",\r\n  //   weather_data\r\n  // ) // Logueo en la consola la respuesta desde la API\r\n\r\n  const { temp, humidity } = weather_data.main\r\n  const temperature = getCelsius(temp)\r\n  const weatherState = getWeatherState(weather_data.weather[0])\r\n  const { speed } = weather_data.wind\r\n\r\n  const data = {\r\n    temperature,\r\n    weatherState,\r\n    humidity,\r\n    wind: `${speed} m/s`,\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nexport default transformWeather\r\n","import { url_base_weather, api_key } from \"../constans/api_url\"\r\n\r\nconst getURLByCity = (city) => {\r\n  return `${url_base_weather}?q=${city}&appid=${api_key}`\r\n}\r\n\r\nexport default getURLByCity\r\n","export const api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\"\r\nexport const url_base_weather = \"http://api.openweathermap.org/data/2.5/weather\"\r\n\r\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`; // Especificando en la llamada medidas devueltas en ºC.\r\n/* Alternativa trayendo los datos utilizando el id de ciudad como la API sugiere:\r\nconst locationId = 3433955;\r\nconst api_weather = `${url_base_weather}?id=${locationId}&appid=${api_key}`;\r\n*/\r\n","import React, { Component } from \"react\"\r\nimport { CircularProgress } from \"@material-ui/core\"\r\nimport PropTypes from \"prop-types\"\r\nimport Location from \"./Location\"\r\nimport WeatherData from \"./WeatherData\"\r\nimport \"./styles.css\"\r\nimport transformWeather from \"../../services/transformWeather\"\r\nimport getURLByCity from \"../../services/getURLByCity\"\r\n\r\n/*\r\nOpenWeatherMap:\tServicio gratuito que provee datos del clima\r\n---------------\r\n\r\n\tPágina principal:\r\n\t\t\t\t\thttps://openweathermap.org/\r\n\r\n\tDocumentación de la API:\r\n\t\t\t\t\thttps://openweathermap.org/api\r\n\r\n\tGuía de uso - How to start:\r\n\t\t\t\t\thttps://openweathermap.org/appid\r\n\r\n\tCiudad Autónoma de Buenos Aires -> id: 3433955\r\n\r\n*/\r\n\r\nclass WeatherLocation extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const { city } = props\r\n    this.state = {\r\n      city,\r\n      data: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleUpdateClick()\r\n  }\r\n\r\n  handleUpdateClick = () => {\r\n    fetch(getURLByCity(this.state.city))\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((weatherJSONResponse) => {\r\n        if (\r\n          weatherJSONResponse &&\r\n          weatherJSONResponse.cod &&\r\n          weatherJSONResponse.cod === 200\r\n        ) {\r\n          this.setState({\r\n            data: transformWeather(weatherJSONResponse),\r\n          })\r\n        } else {\r\n          console.log(\r\n            \"WeatherLocation.handleUpdateClick(): Se produjo un error al obtener datos del servidor.\",\r\n            weatherJSONResponse &&\r\n              weatherJSONResponse.message &&\r\n              weatherJSONResponse.message\r\n          )\r\n        }\r\n      })\r\n      .catch(function (reason) {\r\n        console.log(\r\n          \"WeatherLocation.handleUpdateClick(): Se produjo un error en alguna de las Promises:\",\r\n          reason\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { city, data } = this.state\r\n    return (\r\n      <div\r\n        className=\"weatherLocationContainer\"\r\n        onClick={this.props.onWeatherLocationClick}\r\n      >\r\n        <Location city={city} />\r\n        {data ? <WeatherData data={data} /> : <CircularProgress size={60} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func,\r\n}\r\n\r\nexport default WeatherLocation\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport WeatherLocation from \"./WeatherLocation\"\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  // console.log(cities)\r\n\r\n  const onWeatherLocationSelected = (city) => {\r\n    console.log(\"LocationList.js -> onWeatherLocationSelected() -> city:\", city)\r\n    onSelectedLocation(city)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {cities.map((c, idx) => (\r\n        <WeatherLocation\r\n          key={idx}\r\n          city={c}\r\n          onWeatherLocationClick={() => onWeatherLocationSelected(c)}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func,\r\n}\r\n\r\nexport default LocationList\r\n","import React from \"react\"\r\nimport \"./App.css\"\r\nimport { Grid, Row, Col } from \"react-flexbox-grid\"\r\nimport LocationList from \"./components/LocationList\"\r\n\r\nconst cities = [\r\n  \"Buenos Aires,ar\",\r\n  \"Bogota,col\",\r\n  \"Mexico,mex\",\r\n  \"Washington,us\",\r\n  \"Barcelona,es\",\r\n  \"Santiago,cl\",\r\n  \"Madrid,es\",\r\n  \"Lima,pe\",\r\n]\r\n\r\nconst handleSelectedLocation = (city) =>\r\n  console.log(\"App.js -> handleSelectedLocation() -> city:\", city)\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid>\r\n      <Row>\r\n        <Col xs={3} md={6} lg={12}>\r\n          <div className=\"titulo\">\r\n            Tíitulo (xs={3} md={6} lg={12})\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs={12} md={6}>\r\n          <LocationList\r\n            cities={cities}\r\n            onSelectedLocation={handleSelectedLocation}\r\n          />\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          <div className=\"details\">Extra Info</div>\r\n        </Col>\r\n      </Row>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}