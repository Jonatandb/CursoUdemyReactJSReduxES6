{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","services/transformWeather.js","constants/api_urls.js","services/getURLByCity.js","myComponents/WeatherProgressIndicator/index.jsx","components/WeatherLocation/index.js","components/LocationList.js","components/FerecastItem/index.jsx","services/transformForecast.js","services/getForecastURLByCity.js","components/ForecastExtended.jsx","myComponents/Hour/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Location","city","className","split","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherExtraInfo","humidity","wind","WeatherData","data","transformWeather","weather_data","kelvin","main","temp","Number","convert","from","to","toFixed","weather","id","getWeatherState","speed","api_key","getURLByCity","ICONS_MAPPING","WeatherProgressIndicator","props","GenerateNextIcon","newPos","state","currentIconPos","Object","keys","length","setState","GetCurrentIcon","currentIconName","intervalID","setInterval","this","clearInterval","nextProps","nextState","React","Component","WeatherLocation","getData","fetch","then","response","json","weatherJSONResponse","cod","console","log","message","catch","reason","onClick","onWeatherLocationClick","LocationList","cities","onSelectedLocation","map","c","key","ForecastItem","weekDay","hour","transformForecast","forecast_data","list","filter","item","moment","unix","dt","format","getForecastURLByCity","ForecastExtended","forecastData","getDataByCity","forecastJSONResponse","transformedForecastData","renderForecastItemDays","PureComponent","Hour","useState","Date","toLocaleTimeString","setHour","useEffect","App","handleSelectedLocation","selectedCity","AppBar","position","Toolbar","Typography","variant","color","style","flexGrow","xs","md","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0b5f1f68.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div className=\"locationContainer\">\r\n      <h1>{city.split(',')[0]}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../../constants/weathers';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\n// Weather Icons:\r\n// --------------\r\n\r\n// \tWeather Icons sitio oficial:\r\n// \t\thttp://erikflowers.github.io/weather-icons/\r\n\r\n// \tReact Weather Icons:\r\n// \t\thttps://www.npmjs.com/package/react-weathericons\r\n\r\n// \tWeather Icons CDN:\r\n// \t\thttps://cdnjs.com/libraries/weather-icons\r\n\r\n// \t\tAgregar a index.html:\r\n// \t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.9/css/weather-icons.min.css\" />\r\n\r\nconst icons = {\r\n  // http://erikflowers.github.io/weather-icons/\r\n  [CLOUD]: 'cloud',\r\n  [SUN]: 'day-sunny',\r\n  [RAIN]: 'rain',\r\n  [SNOW]: 'snow',\r\n  [THUNDER]: 'day-thunderstorm',\r\n  [DRIZZLE]: 'day-showers',\r\n};\r\n\r\nconst getWeatherIcon = (weatherState) => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = '4x';\r\n\r\n  if (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n  else return <WeatherIcons className=\"wicon\" name=\"meteor\" size={sizeIcon} />;\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => {\r\n  return (\r\n    <div className=\"weatherTemperatureContainer\">\r\n      {getWeatherIcon(weatherState)}\r\n      <span className=\"temperature\">{` ${temperature}`}</span>\r\n      <span className=\"temperatureType\">{` ÂºC`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","export const CLOUD = \"cloud\"\r\nexport const SUN = \"sun\"\r\nexport const RAIN = \"rain\"\r\nexport const SNOW = \"snow\"\r\nexport const THUNDER = \"thunder\" // Trueno\r\nexport const DRIZZLE = \"drizzle\" // Llovizna\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n\treturn (\r\n\t\t<div className=\"weatherExtraInfoContainer\">\r\n\t\t\t<span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\r\n\t\t\t<span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nWeatherExtraInfo.propTypes = {\r\n\thumidity: PropTypes.number.isRequired,\r\n\twind: PropTypes.string.isRequired,\r\n};\r\nexport default WeatherExtraInfo;\r\n","import React from 'react'\r\nimport WeatherTemperature from './WeatherTemperature'\r\nimport WeatherExtraInfo from './WeatherExtraInfo'\r\nimport './styles.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\r\n    <div className=\"weatherDataContainer\">\r\n        <WeatherTemperature\r\n            temperature={temperature}\r\n            weatherState={weatherState}\r\n        />\r\n        <WeatherExtraInfo\r\n            humidity={humidity}\r\n            wind={wind}\r\n        />\r\n    </div>\r\n)\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    }),\r\n}\r\nexport default WeatherData","import convert from 'convert-units';\r\nimport { SUN, DRIZZLE, THUNDER, RAIN, SNOW, CLOUD } from '../constants/weathers';\r\n\r\nconst getCelsius = (kelvin) => Number(convert(kelvin).from('K').to('C').toFixed(0));\r\n\r\nconst getWeatherState = (weather) => {\r\n  const { id } = weather;\r\n  if (id < 300) {\r\n    return THUNDER;\r\n  } else if (id < 400) {\r\n    return DRIZZLE;\r\n  } else if (id < 600) {\r\n    return RAIN;\r\n  } else if (id < 700) {\r\n    return SNOW;\r\n  } else if (id === 800) {\r\n    return SUN;\r\n  } else {\r\n    return CLOUD;\r\n  }\r\n};\r\n\r\nconst transformWeather = (weather_data) => {\r\n  // console.log('transformWeather: Respuesta JSON recibida desde la API:\\n', weather_data); // Logueo en la consola la respuesta desde la API\r\n\r\n  const { temp, humidity } = weather_data.main;\r\n  const temperature = getCelsius(temp);\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const { speed } = weather_data.wind;\r\n\r\n  const data = {\r\n    temperature,\r\n    weatherState,\r\n    humidity,\r\n    wind: `${speed} m/s`,\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;\r\n","export const api_key = 'f99bbd9e4959b513e9bd0d7f7356b38d';\r\nexport const url_base_weather = 'https://api.openweathermap.org/data/2.5/weather';\r\nexport const url_base_forecast = 'https://api.openweathermap.org/data/2.5/forecast';\r\n\r\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`; // Especificando en la llamada medidas devueltas en ÂºC.\r\n/* Alternativa trayendo los datos utilizando el id de ciudad como la API sugiere:\r\nconst locationId = 3433955;\r\nconst api_weather = `${url_base_weather}?id=${locationId}&appid=${api_key}`;\r\n*/\r\n","import { url_base_weather, api_key } from '../constants/api_urls';\r\n\r\nconst getURLByCity = (city) => `${url_base_weather}?q=${city}&appid=${api_key}`;\r\n\r\nexport default getURLByCity;\r\n","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../constants/weathers';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst ICONS_MAPPING = {\r\n  // http://erikflowers.github.io/weather-icons/\r\n  [SUN]: 'day-sunny',\r\n  [CLOUD]: 'cloud',\r\n  [SNOW]: 'snow',\r\n  [RAIN]: 'rain',\r\n  [THUNDER]: 'day-thunderstorm',\r\n  [DRIZZLE]: 'day-showers',\r\n};\r\n\r\nclass WeatherProgressIndicator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentIconPos: 0,\r\n      intervalID: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const intervalID = setInterval(this.GenerateNextIcon, 150);\r\n    this.setState({ intervalID });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalID);\r\n  }\r\n\r\n  GenerateNextIcon = () => {\r\n    const { currentIconPos } = this.state;\r\n    let newPos = currentIconPos;\r\n    newPos++;\r\n    if (newPos > Object.keys(ICONS_MAPPING).length - 1) newPos = 0;\r\n    this.setState({ currentIconPos: newPos });\r\n  };\r\n\r\n  GetCurrentIcon = () => {\r\n    const { currentIconPos } = this.state;\r\n    const { size = '4x' } = this.props;\r\n    const currentIconName = ICONS_MAPPING[Object.keys(ICONS_MAPPING)[currentIconPos]];\r\n    return <WeatherIcons className=\"wicon\" name={currentIconName} size={size} />;\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextState.currentIconPos !== this.state.currentIconPos;\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"myWeatherProgressIndicator\">{this.GetCurrentIcon()}</div>;\r\n  }\r\n}\r\n\r\nWeatherProgressIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['lg', '2x', '3x', '4x', '5x']),\r\n};\r\n\r\nexport default WeatherProgressIndicator;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\nimport transformWeather from '../../services/transformWeather';\r\nimport getURLByCity from '../../services/getURLByCity';\r\nimport WeatherProgressIndicator from '../../myComponents/WeatherProgressIndicator';\r\n\r\nclass WeatherLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { city } = props;\r\n    this.state = {\r\n      city,\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  getData = () => {\r\n    const { city } = this.state;\r\n    fetch(getURLByCity(city))\r\n      .then((response) => response.json())\r\n      .then((weatherJSONResponse) => {\r\n        if (weatherJSONResponse && weatherJSONResponse.cod && weatherJSONResponse.cod === 200) {\r\n          this.setState({\r\n            data: transformWeather(weatherJSONResponse),\r\n          });\r\n        } else {\r\n          console.log(\r\n            'WeatherLocation: Se produjo un error al obtener datos del servidor.',\r\n            weatherJSONResponse && weatherJSONResponse.message && weatherJSONResponse.message,\r\n          );\r\n        }\r\n      })\r\n      .catch((reason) => console.log('WeatherLocation: Se produjo un error al obtener datos del servidor:', reason));\r\n  };\r\n\r\n  render() {\r\n    const { city, data } = this.state;\r\n    return (\r\n      <div className=\"weatherLocationContainer\" onClick={this.props.onWeatherLocationClick}>\r\n        <Location city={city} />\r\n        {data ? <WeatherData data={data} /> : <WeatherProgressIndicator />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default WeatherLocation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherLocation from './WeatherLocation';\r\nimport './styles.css';\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  const onWeatherLocationSelected = (city) => {\r\n    //console.log('LocationList -> onWeatherLocationSelected -> city:', city);\r\n    onSelectedLocation(city);\r\n  };\r\n\r\n  return (\r\n    <div className=\"locationList\">\r\n      {cities.map((c) => (\r\n        <WeatherLocation key={c} city={c} onWeatherLocationClick={() => onWeatherLocationSelected(c)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func,\r\n};\r\n\r\nexport default LocationList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherData from '../WeatherLocation/WeatherData';\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        {weekDay} - {hour} hs\r\n      </h2>\r\n      <WeatherData data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nForecastItem.propTypes = {\r\n  weekDay: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n\r\nexport default ForecastItem;\r\n","import moment from 'moment';\r\nimport transformWeather from './transformWeather';\r\nimport 'moment/locale/es';\r\n\r\nconst transformForecast = (forecast_data) =>\r\n  forecast_data.list\r\n    .filter(\r\n      (item) =>\r\n        moment.unix(item.dt).hour() === 6 || moment.unix(item.dt).hour() === 12 || moment.unix(item.dt).hour() === 18,\r\n    )\r\n    .map((item) => ({\r\n      weekDay: moment.unix(item.dt).format('ddd'),\r\n      hour: moment.unix(item.dt).hour(),\r\n      data: transformWeather(item),\r\n    }));\r\n\r\nexport default transformForecast;\r\n","import { url_base_forecast, api_key } from '../constants/api_urls';\r\n\r\nconst getForecastURLByCity = (city) => `${url_base_forecast}?q=${city}&appid=${api_key}`;\r\n\r\nexport default getForecastURLByCity;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\nimport ForecastItem from './FerecastItem';\r\nimport transformForecast from './../services/transformForecast';\r\nimport getForecastURLByCity from './../services/getForecastURLByCity';\r\nimport WeatherProgressIndicator from '../myComponents/WeatherProgressIndicator';\r\n\r\nclass ForecastExtended extends PureComponent {\r\n  state = {\r\n    forecastData: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDataByCity(this.props.city);\r\n  }\r\n\r\n  render() {\r\n    const { city } = this.props;\r\n    const { forecastData } = this.state;\r\n    return (\r\n      <div>\r\n        <h4 className=\"forecastExtendedTitle\">PronÃ³stico extendido: {city.split(',')[0]}</h4>\r\n        {!forecastData ? <WeatherProgressIndicator size=\"2x\" /> : this.renderForecastItemDays(forecastData)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderForecastItemDays(forecastData) {\r\n    return forecastData.map(({ weekDay, hour, data }) => (\r\n      <ForecastItem key={weekDay + hour} weekDay={weekDay} hour={hour} data={data} />\r\n    ));\r\n  }\r\n\r\n  getDataByCity = (city) => {\r\n    fetch(getForecastURLByCity(city))\r\n      .then((response) => response.json())\r\n      .then((forecastJSONResponse) => {\r\n        if (forecastJSONResponse && forecastJSONResponse.cod && forecastJSONResponse.cod === '200') {\r\n          const transformedForecastData = transformForecast(forecastJSONResponse);\r\n          this.setState({\r\n            forecastData: transformedForecastData,\r\n          });\r\n        } else {\r\n          console.log(\r\n            'ForecastExtended -> getData(): Se produjo un error al obtener datos del servidor.',\r\n            forecastJSONResponse && forecastJSONResponse.message && forecastJSONResponse.message,\r\n          );\r\n        }\r\n      })\r\n      .catch((reason) =>\r\n        console.log('ForecastExtended -> getData(): Se produjo un error al obtener datos del servidor:', reason),\r\n      );\r\n  };\r\n}\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ForecastExtended;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Hour = () => {\r\n  const [hour, setHour] = useState(new Date().toLocaleTimeString());\r\n\r\n  useEffect(() => {\r\n    const intervalID = setInterval(() => {\r\n      setHour(new Date().toLocaleTimeString());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalID);\r\n  }, [hour]);\r\n\r\n  return <div>{hour}</div>;\r\n};\r\n\r\nexport default Hour;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport { AppBar, Typography, Toolbar, Paper } from '@material-ui/core';\r\n\r\nimport LocationList from './components/LocationList';\r\nimport ForecastExtended from './components/ForecastExtended';\r\nimport Hour from './myComponents/Hour';\r\n\r\nconst cities = [\r\n  'Barcelona,es',\r\n  'Bogota,col',\r\n  'Buenos Aires,ar',\r\n  'Lima,pe',\r\n  'Madrid,ess',\r\n  'Mexico,mex',\r\n  'Santiago,cl',\r\n  'Washington,us',\r\n];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedCity: null,\r\n    };\r\n  }\r\n\r\n  handleSelectedLocation = (city) => {\r\n    this.setState({ selectedCity: city });\r\n  };\r\n\r\n  render() {\r\n    const { selectedCity } = this.state;\r\n    return (\r\n      <>\r\n        <Grid>\r\n          <Row>\r\n            <AppBar position=\"sticky\">\r\n              <Toolbar>\r\n                <Typography variant=\"h4\" color=\"inherit\" style={{ flexGrow: 1 }}>\r\n                  Weather App\r\n                </Typography>\r\n                <Hour />\r\n              </Toolbar>\r\n            </AppBar>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} md={6}>\r\n              <LocationList cities={cities} onSelectedLocation={this.handleSelectedLocation} />\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n              <Paper elevation={4}>\r\n                <div className=\"details\">\r\n                  {selectedCity ? (\r\n                    <ForecastExtended key={selectedCity} city={selectedCity} />\r\n                  ) : (\r\n                    <h4 className=\"forecastExtendedTitle\">Seleccione una ciudad para ver el pronÃ³stico extendido</h4>\r\n                  )}\r\n                </div>\r\n              </Paper>\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}