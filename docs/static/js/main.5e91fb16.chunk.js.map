{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constans/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","services/transformWeather.js","services/getURLByCity.js","constans/api_url.js","components/WeatherLocation/index.js","components/LocationList.js","components/ForecastExtended.jsx","App.js","serviceWorker.js","index.js"],"names":["Location","city","className","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherExtraInfo","humidity","wind","WeatherData","data","transformWeather","weather_data","kelvin","main","temp","Number","convert","from","to","toFixed","weather","id","getWeatherState","speed","getURLByCity","WeatherLocation","props","handleUpdateClick","state","fetch","then","response","json","weatherJSONResponse","cod","setState","console","log","message","catch","reason","this","onClick","onWeatherLocationClick","CircularProgress","Component","LocationList","cities","onSelectedLocation","map","c","idx","key","ForecastExtended","App","handleSelectedLocation","AppBar","position","Toolbar","Typography","variant","color","xs","md","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5e91fb16.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\nconst Location = ({ city }) => {\r\n    return (\r\n        <div className=\"locationContainer\">\r\n            <h1>{city}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nLocation.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Location","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../../constans/weathers';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\n// Weather Icons:\r\n// --------------\r\n\r\n// \tWeather Icons sitio oficial:\r\n// \t\thttp://erikflowers.github.io/weather-icons/\r\n\r\n// \tReact Weather Icons:\r\n// \t\thttps://www.npmjs.com/package/react-weathericons\r\n\r\n// \tWeather Icons CDN:\r\n// \t\thttps://cdnjs.com/libraries/weather-icons\r\n\r\n// \t\tAgregar a index.html:\r\n// \t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.9/css/weather-icons.min.css\" />\r\n\r\nconst icons = {\r\n\t// http://erikflowers.github.io/weather-icons/\r\n\t[CLOUD]: 'cloud',\r\n\t[SUN]: 'day-sunny',\r\n\t[RAIN]: 'rain',\r\n\t[SNOW]: 'snow',\r\n\t[THUNDER]: 'day-thunderstorm',\r\n\t[DRIZZLE]: 'day-showers',\r\n};\r\n\r\nconst getWeatherIcon = (weatherState) => {\r\n\tconst icon = icons[weatherState];\r\n\tconst sizeIcon = '4x';\r\n\r\n\tif (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n\telse return <WeatherIcons className=\"wicon\" name=\"meteor\" size={sizeIcon} />;\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => {\r\n\treturn (\r\n\t\t<div className=\"weatherTemperatureContainer\">\r\n\t\t\t{getWeatherIcon(weatherState)}\r\n\t\t\t<span className=\"temperature\">{` ${temperature}`}</span>\r\n\t\t\t<span className=\"temperatureType\">{` ÂºC`}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nWeatherTemperature.propTypes = {\r\n\ttemperature: PropTypes.number.isRequired,\r\n\tweatherState: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","export const CLOUD = \"cloud\"\r\nexport const SUN = \"sun\"\r\nexport const RAIN = \"rain\"\r\nexport const SNOW = \"snow\"\r\nexport const THUNDER = \"thunder\" // Trueno\r\nexport const DRIZZLE = \"drizzle\" // Llovizna\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n\treturn (\r\n\t\t<div className=\"weatherExtraInfoContainer\">\r\n\t\t\t<span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\r\n\t\t\t<span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nWeatherExtraInfo.propTypes = {\r\n\thumidity: PropTypes.number.isRequired,\r\n\twind: PropTypes.string.isRequired,\r\n};\r\nexport default WeatherExtraInfo;\r\n","import React from 'react'\r\nimport WeatherTemperature from './WeatherTemperature'\r\nimport WeatherExtraInfo from './WeatherExtraInfo'\r\nimport './styles.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\r\n    <div className=\"weatherDataContainer\">\r\n        <WeatherTemperature\r\n            temperature={temperature}\r\n            weatherState={weatherState}\r\n        />\r\n        <WeatherExtraInfo\r\n            humidity={humidity}\r\n            wind={wind}\r\n        />\r\n    </div>\r\n)\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    }),\r\n}\r\nexport default WeatherData","import convert from 'convert-units';\r\nimport { SUN, DRIZZLE, THUNDER, RAIN, SNOW, CLOUD } from '../constans/weathers';\r\n\r\nconst getCelsius = (kelvin) => Number(convert(kelvin).from('K').to('C').toFixed(0));\r\n\r\nconst getWeatherState = (weather) => {\r\n\tconst { id } = weather;\r\n\tif (id < 300) {\r\n\t\treturn THUNDER;\r\n\t} else if (id < 400) {\r\n\t\treturn DRIZZLE;\r\n\t} else if (id < 600) {\r\n\t\treturn RAIN;\r\n\t} else if (id < 700) {\r\n\t\treturn SNOW;\r\n\t} else if (id === 800) {\r\n\t\treturn SUN;\r\n\t} else {\r\n\t\treturn CLOUD;\r\n\t}\r\n};\r\n\r\nconst transformWeather = (weather_data) => {\r\n\t// console.log(\r\n\t//   \"transformWeather: Respuesta JSON recibida desde la API:\\n\",\r\n\t//   weather_data\r\n\t// ) // Logueo en la consola la respuesta desde la API\r\n\r\n\tconst { temp, humidity } = weather_data.main;\r\n\tconst temperature = getCelsius(temp);\r\n\tconst weatherState = getWeatherState(weather_data.weather[0]);\r\n\tconst { speed } = weather_data.wind;\r\n\r\n\tconst data = {\r\n\t\ttemperature,\r\n\t\tweatherState,\r\n\t\thumidity,\r\n\t\twind: `${speed} m/s`,\r\n\t};\r\n\r\n\treturn data;\r\n};\r\n\r\nexport default transformWeather;\r\n","import { url_base_weather, api_key } from \"../constans/api_url\"\r\n\r\nconst getURLByCity = (city) => {\r\n  return `${url_base_weather}?q=${city}&appid=${api_key}`\r\n}\r\n\r\nexport default getURLByCity\r\n","export const api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\"\r\nexport const url_base_weather =\r\n  \"https://api.openweathermap.org/data/2.5/weather\"\r\n\r\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`; // Especificando en la llamada medidas devueltas en ÂºC.\r\n/* Alternativa trayendo los datos utilizando el id de ciudad como la API sugiere:\r\nconst locationId = 3433955;\r\nconst api_weather = `${url_base_weather}?id=${locationId}&appid=${api_key}`;\r\n*/\r\n","import React, { Component } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\nimport transformWeather from '../../services/transformWeather';\r\nimport getURLByCity from '../../services/getURLByCity';\r\n\r\n/*\r\nOpenWeatherMap:\tServicio gratuito que provee datos del clima\r\n---------------\r\n\r\n\tPÃ¡gina principal:\r\n\t\t\t\t\thttps://openweathermap.org/\r\n\r\n\tDocumentaciÃ³n de la API:\r\n\t\t\t\t\thttps://openweathermap.org/api\r\n\r\n\tGuÃ­a de uso - How to start:\r\n\t\t\t\t\thttps://openweathermap.org/appid\r\n\r\n\tCiudad AutÃ³noma de Buenos Aires -> id: 3433955\r\n\r\n*/\r\n\r\nclass WeatherLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { city } = props;\r\n    this.state = {\r\n      city,\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleUpdateClick();\r\n  }\r\n\r\n  handleUpdateClick = () => {\r\n    const { city } = this.state;\r\n    fetch(getURLByCity(city))\r\n      .then((response) => response.json())\r\n      .then((weatherJSONResponse) => {\r\n        if (weatherJSONResponse && weatherJSONResponse.cod && weatherJSONResponse.cod === 200) {\r\n          this.setState({\r\n            data: transformWeather(weatherJSONResponse),\r\n          });\r\n        } else {\r\n          console.log(\r\n            'WeatherLocation.handleUpdateClick(): Se produjo un error al obtener datos del servidor.',\r\n            weatherJSONResponse && weatherJSONResponse.message && weatherJSONResponse.message,\r\n          );\r\n        }\r\n      })\r\n      .catch((reason) =>\r\n        console.log('WeatherLocation.handleUpdateClick(): Se produjo un error en alguna de las Promises:', reason),\r\n      );\r\n  };\r\n\r\n  render() {\r\n    const { city, data } = this.state;\r\n    return (\r\n      <div className=\"weatherLocationContainer\" onClick={this.props.onWeatherLocationClick}>\r\n        <Location city={city} />\r\n        {data ? <WeatherData data={data} /> : <CircularProgress size={60} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default WeatherLocation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherLocation from './WeatherLocation';\r\nimport './styles.css';\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  const onWeatherLocationSelected = (city) => {\r\n    console.log('LocationList.js -> onWeatherLocationSelected() -> city:', city);\r\n    onSelectedLocation(city);\r\n  };\r\n\r\n  return (\r\n    <div className=\"locationList\">\r\n      {cities.map((c, idx) => (\r\n        <WeatherLocation key={idx} city={c} onWeatherLocationClick={() => onWeatherLocationSelected(c)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func,\r\n};\r\n\r\nexport default LocationList;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nclass ForecastExtended extends Component {\r\n  render() {\r\n    const { city } = this.props;\r\n    return <h2 className=\"forecastExtendedTitle\">PronÃ³stico extendido: {city}</h2>;\r\n  }\r\n}\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ForecastExtended;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport { AppBar, Typography, Toolbar, Paper } from '@material-ui/core';\r\nimport LocationList from './components/LocationList';\r\nimport ForecastExtended from './components/ForecastExtended';\r\n\r\nconst cities = [\r\n  'Buenos Aires,ar',\r\n  'Bogota,col',\r\n  'Mexico,mex',\r\n  'Washington,us',\r\n  'Barcelona,es',\r\n  'Santiago,cl',\r\n  'Madrid,es',\r\n  'Lima,pe',\r\n];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: null,\r\n    };\r\n  }\r\n\r\n  handleSelectedLocation = (city) => this.setState({ city });\r\n\r\n  render() {\r\n    const { city } = this.state;\r\n    return (\r\n      <>\r\n        <Grid>\r\n          <Row>\r\n            <AppBar position=\"sticky\">\r\n              <Toolbar>\r\n                <Typography variant=\"h4\" color=\"inherit\">\r\n                  Weather App\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} md={6}>\r\n              <LocationList cities={cities} onSelectedLocation={this.handleSelectedLocation} />\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n              <Paper elevation={4}>\r\n                <div className=\"details\">{city && <ForecastExtended city={city} />}</div>\r\n              </Paper>\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}