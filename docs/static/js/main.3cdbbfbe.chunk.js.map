{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","components/_MyComponents/WeatherProgressIndicator/index.jsx","components/_MyComponents/Hour/index.jsx","components/WeatherLocation/index.js","components/LocationList.js","components/FerecastItem/index.jsx","components/ForecastExtended.jsx","constants/api_urls.js","services/getWeatherURLByCity.js","services/getForecastURLByCity.js","services/transformWeather.js","services/transformForecast.js","actions/index.js","constants/actions_constans.js","reducers/setSelectedCityReducer.js","reducers/setForecastDataReducer.js","reducers/index.js","containers/LocationListContainer.jsx","containers/ForecastExtendedContainer.jsx","App.js","serviceWorker.js","store/index.js","index.js"],"names":["Location","city","className","split","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherExtraInfo","humidity","wind","WeatherData","data","ICONS_MAPPING","WeatherProgressIndicator","props","GenerateNextIcon","newPos","state","currentIconPos","Object","keys","length","setState","GetCurrentIcon","currentIconName","intervalID","setInterval","this","clearInterval","nextProps","nextState","React","Component","Hour","useState","Date","toLocaleTimeString","hour","setHour","useEffect","WeatherLocation","onWeatherLocationClick","onClick","LocationList","cities","onSelectedLocation","map","key","onWeatherLocationSelected","ForecastItem","weekDay","ForecastExtended","component","forecastData","renderForecastItemForEachDay","api_key","getWeatherURLByCity","getForecastURLByCity","transformWeather","weather_data","kelvin","main","temp","Number","convert","from","to","toFixed","weather","id","getWeatherState","speed","transformForecast","forecast_data","list","filter","item","moment","unix","dt","format","getForecastData","dispatch","getState","type","payload","date","forecastDataDate","now","fetch","then","response","json","forecastJSONResponse","cod","transformedForecastData","setForecastDataActionCreator","console","log","message","catch","reason","getWeather","forEach","weatherJSONResponse","transformedWeatherData","setWeatherCityActionCreator","weatherData","getWeatherCities","createSelector","toPairs","forecastDataSelector","combineReducers","selectedCity","action","selectedCitySelector","_forecastDataSelector","_getWeatherCities","LocationListContainer","handleSelectedLocation","citiesWeather","connect","bindActionCreators","actions","ForecastExtendedContainer","App","AppBar","position","Toolbar","Typography","variant","color","style","flexGrow","xs","md","Paper","elevation","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3cdbbfbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div className=\"locationContainer\">\r\n      <h1>{city.split(',')[0]}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../../constants/weathers';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\n// Weather Icons:\r\n// --------------\r\n\r\n// \tWeather Icons sitio oficial:\r\n// \t\thttp://erikflowers.github.io/weather-icons/\r\n\r\n// \tReact Weather Icons:\r\n// \t\thttps://www.npmjs.com/package/react-weathericons\r\n\r\n// \tWeather Icons CDN:\r\n// \t\thttps://cdnjs.com/libraries/weather-icons\r\n\r\n// \t\tAgregar a index.html:\r\n// \t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.9/css/weather-icons.min.css\" />\r\n\r\nconst icons = {\r\n  // http://erikflowers.github.io/weather-icons/\r\n  [CLOUD]: 'cloud',\r\n  [SUN]: 'day-sunny',\r\n  [RAIN]: 'rain',\r\n  [SNOW]: 'snow',\r\n  [THUNDER]: 'day-thunderstorm',\r\n  [DRIZZLE]: 'day-showers',\r\n};\r\n\r\nconst getWeatherIcon = (weatherState) => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = '4x';\r\n\r\n  if (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n  else return <WeatherIcons className=\"wicon\" name=\"meteor\" size={sizeIcon} />;\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => {\r\n  return (\r\n    <div className=\"weatherTemperatureContainer\">\r\n      {getWeatherIcon(weatherState)}\r\n      <span className=\"temperature\">{` ${temperature}`}</span>\r\n      <span className=\"temperatureType\">{` ºC`}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","export const CLOUD = \"cloud\"\r\nexport const SUN = \"sun\"\r\nexport const RAIN = \"rain\"\r\nexport const SNOW = \"snow\"\r\nexport const THUNDER = \"thunder\" // Trueno\r\nexport const DRIZZLE = \"drizzle\" // Llovizna\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => {\r\n\treturn (\r\n\t\t<div className=\"weatherExtraInfoContainer\">\r\n\t\t\t<span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\r\n\t\t\t<span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nWeatherExtraInfo.propTypes = {\r\n\thumidity: PropTypes.number.isRequired,\r\n\twind: PropTypes.string.isRequired,\r\n};\r\nexport default WeatherExtraInfo;\r\n","import React from 'react'\r\nimport WeatherTemperature from './WeatherTemperature'\r\nimport WeatherExtraInfo from './WeatherExtraInfo'\r\nimport './styles.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\r\n    <div className=\"weatherDataContainer\">\r\n        <WeatherTemperature\r\n            temperature={temperature}\r\n            weatherState={weatherState}\r\n        />\r\n        <WeatherExtraInfo\r\n            humidity={humidity}\r\n            wind={wind}\r\n        />\r\n    </div>\r\n)\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    }),\r\n}\r\nexport default WeatherData","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from '../../../constants/weathers';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst ICONS_MAPPING = {\r\n  // http://erikflowers.github.io/weather-icons/\r\n  [SUN]: 'day-sunny',\r\n  [CLOUD]: 'cloud',\r\n  [SNOW]: 'snow',\r\n  [RAIN]: 'rain',\r\n  [THUNDER]: 'day-thunderstorm',\r\n  [DRIZZLE]: 'day-showers',\r\n};\r\n\r\nclass WeatherProgressIndicator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentIconPos: 0,\r\n      intervalID: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const intervalID = setInterval(this.GenerateNextIcon, 150);\r\n    this.setState({ intervalID });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalID);\r\n  }\r\n\r\n  GenerateNextIcon = () => {\r\n    const { currentIconPos } = this.state;\r\n    let newPos = currentIconPos;\r\n    newPos++;\r\n    if (newPos > Object.keys(ICONS_MAPPING).length - 1) newPos = 0;\r\n    this.setState({ currentIconPos: newPos });\r\n  };\r\n\r\n  GetCurrentIcon = () => {\r\n    const { currentIconPos } = this.state;\r\n    const { size = '4x' } = this.props;\r\n    const currentIconName = ICONS_MAPPING[Object.keys(ICONS_MAPPING)[currentIconPos]];\r\n    return <WeatherIcons className=\"wicon\" name={currentIconName} size={size} />;\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextState.currentIconPos !== this.state.currentIconPos;\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"myWeatherProgressIndicator\">{this.GetCurrentIcon()}</div>;\r\n  }\r\n}\r\n\r\nWeatherProgressIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['lg', '2x', '3x', '4x', '5x']),\r\n};\r\n\r\nexport default WeatherProgressIndicator;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Hour = () => {\r\n  const [hour, setHour] = useState(new Date().toLocaleTimeString());\r\n\r\n  useEffect(() => {\r\n    const intervalID = setInterval(() => {\r\n      setHour(new Date().toLocaleTimeString());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalID);\r\n  }, [hour]);\r\n\r\n  return <div>{hour}</div>;\r\n};\r\n\r\nexport default Hour;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\nimport { WeatherProgressIndicator } from '../../components/_MyComponents';\r\n\r\nconst WeatherLocation = ({ city, data, onWeatherLocationClick }) => (\r\n  <div className=\"weatherLocationContainer\" onClick={onWeatherLocationClick}>\r\n    <Location city={city} />\r\n    {!data ? <WeatherProgressIndicator /> : <WeatherData data={data} />}\r\n  </div>\r\n);\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n  }),\r\n  onWeatherLocationClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default WeatherLocation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\nimport WeatherLocation from './WeatherLocation';\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  const onWeatherLocationSelected = (city) => {\r\n    onSelectedLocation(city);\r\n  };\r\n\r\n  return (\r\n    <div className=\"locationList\">\r\n      {cities.map((city) => (\r\n        <WeatherLocation\r\n          key={city.key}\r\n          city={city.name}\r\n          data={city.data}\r\n          onWeatherLocationClick={() => onWeatherLocationSelected(city.name)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func,\r\n};\r\n\r\nexport default LocationList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherData from '../WeatherLocation/WeatherData';\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        {weekDay} - {hour} hs\r\n      </h2>\r\n      <WeatherData data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nForecastItem.propTypes = {\r\n  weekDay: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n\r\nexport default ForecastItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\nimport ForecastItem from './FerecastItem';\r\nimport { WeatherProgressIndicator } from '../components/_MyComponents';\r\n\r\nconst renderForecastItemForEachDay = (forecastData) => {\r\n  return forecastData.map(({ weekDay, hour, data }) => (\r\n    <ForecastItem key={weekDay + hour} weekDay={weekDay} hour={hour} data={data} />\r\n  ));\r\n};\r\n\r\nconst ForecastExtended = (props) => {\r\n  let { city } = props;\r\n  city = (city && city.split(',')[0]) || city;\r\n  const { forecastData } = props;\r\n  let component;\r\n  if (city && forecastData) {\r\n    component = (\r\n      <>\r\n        <h4 className=\"forecastExtendedTitle\">Pronóstico extendido para {city}</h4>\r\n        {renderForecastItemForEachDay(forecastData)}\r\n      </>\r\n    );\r\n  } else if (city && !forecastData) {\r\n    component = (\r\n      <>\r\n        <h4 className=\"forecastExtendedTitle\">Cargando pronóstico extendido para {city}</h4>\r\n        <WeatherProgressIndicator size=\"2x\" />\r\n      </>\r\n    );\r\n  } else {\r\n    component = <h4 className=\"forecastExtendedTitle\">Seleccione una ciudad para ver el pronóstico extendido</h4>;\r\n  }\r\n  return <div>{component}</div>;\r\n};\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  forecastData: PropTypes.array,\r\n};\r\n\r\nexport default ForecastExtended;\r\n","export const api_key = 'f99bbd9e4959b513e9bd0d7f7356b38d';\r\nexport const url_base_weather = 'https://api.openweathermap.org/data/2.5/weather';\r\nexport const url_base_forecast = 'https://api.openweathermap.org/data/2.5/forecast';\r\n\r\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`; // Especificando en la llamada medidas devueltas en ºC.\r\n/* Alternativa trayendo los datos utilizando el id de ciudad como la API sugiere:\r\nconst locationId = 3433955;\r\nconst api_weather = `${url_base_weather}?id=${locationId}&appid=${api_key}`;\r\n*/\r\n","import { url_base_weather, api_key } from '../constants/api_urls';\r\n\r\nconst getWeatherURLByCity = (city) => `${url_base_weather}?q=${city}&appid=${api_key}`;\r\n\r\nexport default getWeatherURLByCity;\r\n","import { url_base_forecast, api_key } from '../constants/api_urls';\r\n\r\nconst getForecastURLByCity = (city) => `${url_base_forecast}?q=${city}&appid=${api_key}`;\r\n\r\nexport default getForecastURLByCity;\r\n","import convert from 'convert-units';\r\nimport { SUN, DRIZZLE, THUNDER, RAIN, SNOW, CLOUD } from '../constants/weathers';\r\n\r\nconst getCelsius = (kelvin) => Number(convert(kelvin).from('K').to('C').toFixed(0));\r\n\r\nconst getWeatherState = (weather) => {\r\n  const { id } = weather;\r\n  if (id < 300) {\r\n    return THUNDER;\r\n  } else if (id < 400) {\r\n    return DRIZZLE;\r\n  } else if (id < 600) {\r\n    return RAIN;\r\n  } else if (id < 700) {\r\n    return SNOW;\r\n  } else if (id === 800) {\r\n    return SUN;\r\n  } else {\r\n    return CLOUD;\r\n  }\r\n};\r\n\r\nconst transformWeather = (weather_data) => {\r\n  const { temp, humidity } = weather_data.main;\r\n  const temperature = getCelsius(temp);\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const { speed } = weather_data.wind;\r\n\r\n  const data = {\r\n    temperature,\r\n    weatherState,\r\n    humidity,\r\n    wind: `${speed} m/s`,\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;\r\n","import moment from 'moment';\r\nimport transformWeather from './transformWeather';\r\nimport 'moment/locale/es';\r\n\r\nconst transformForecast = (forecast_data) =>\r\n  forecast_data.list\r\n    .filter(\r\n      (item) =>\r\n        moment.unix(item.dt).hour() === 6 || moment.unix(item.dt).hour() === 12 || moment.unix(item.dt).hour() === 18,\r\n    )\r\n    .map((item) => ({\r\n      weekDay: moment.unix(item.dt).format('ddd'),\r\n      hour: moment.unix(item.dt).hour(),\r\n      data: transformWeather(item),\r\n    }));\r\n\r\nexport default transformForecast;\r\n","import getWeatherURLByCity from '../services/getWeatherURLByCity';\r\nimport getForecastURLByCity from '../services/getForecastURLByCity';\r\nimport transformForecast from '../services/transformForecast';\r\nimport transformWeather from '../services/transformWeather';\r\n\r\nimport {\r\n  SET_SELECTED_CITY,\r\n  SET_FORECAST_DATA,\r\n  SET_WEATHER_CITY,\r\n  GET_WEATHER_CITY,\r\n} from '../constants/actions_constans';\r\n\r\nconst setSelectedCityActionCreator = (payload) => ({ type: SET_SELECTED_CITY, payload });\r\n\r\nconst setForecastDataActionCreator = (payload) => ({ type: SET_FORECAST_DATA, payload });\r\n\r\nconst getWeatherCityActionCreator = (payload) => ({ type: GET_WEATHER_CITY, payload });\r\n\r\nconst setWeatherCityActionCreator = (payload) => ({ type: SET_WEATHER_CITY, payload });\r\n\r\nexport const getForecastData = (city) => {\r\n  return (dispatch, getState) => {\r\n    dispatch(setSelectedCityActionCreator(city));\r\n\r\n    const state = getState();\r\n    const date = state.cities[city] && state.cities[city].forecastDataDate;\r\n    const now = new Date();\r\n\r\n    if (date && now - date < 1 * 60 * 1000) {\r\n      return;\r\n    }\r\n\r\n    fetch(getForecastURLByCity(city))\r\n      .then((response) => response.json())\r\n      .then((forecastJSONResponse) => {\r\n        if (forecastJSONResponse && forecastJSONResponse.cod && forecastJSONResponse.cod === '200') {\r\n          const transformedForecastData = transformForecast(forecastJSONResponse);\r\n          dispatch(setForecastDataActionCreator({ city, forecastData: transformedForecastData }));\r\n        } else {\r\n          console.log(\r\n            `getForecastData -> Se produjo un error al obtener datos del servidor para la ciudad: ${city}`,\r\n            forecastJSONResponse && forecastJSONResponse.message && forecastJSONResponse.message,\r\n          );\r\n        }\r\n      })\r\n      .catch((reason) =>\r\n        console.log(\r\n          `getForecastData -> Se produjo un error al obtener datos del servidor para la ciudad: ${city}`,\r\n          reason,\r\n        ),\r\n      );\r\n  };\r\n};\r\n\r\nexport const getWeather = (cities) => {\r\n  return (dispatch) => {\r\n    cities.forEach((city) => {\r\n      dispatch(getWeatherCityActionCreator(city));\r\n      fetch(getWeatherURLByCity(city))\r\n        .then((response) => response.json())\r\n        .then((weatherJSONResponse) => {\r\n          let transformedWeatherData = null;\r\n          if (weatherJSONResponse && weatherJSONResponse.cod && weatherJSONResponse.cod === 200) {\r\n            transformedWeatherData = transformWeather(weatherJSONResponse);\r\n          } else {\r\n            console.log(\r\n              `getWeather -> Se produjo un error al obtener datos del servidor para la ciudad: ${city}`,\r\n              weatherJSONResponse && weatherJSONResponse.message && weatherJSONResponse.message,\r\n            );\r\n          }\r\n          dispatch(setWeatherCityActionCreator({ city, weatherData: transformedWeatherData }));\r\n        })\r\n        .catch((reason) =>\r\n          console.log(\r\n            `getWeather -> Se produjo un error al obtener datos del servidor para la ciudad: ${city}`,\r\n            reason,\r\n          ),\r\n        );\r\n    });\r\n  };\r\n};\r\n","export const SET_SELECTED_CITY = 'SET_SELECTED_CITY';\r\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\r\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\r\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\r\n","import toPairs from 'lodash.topairs';\r\nimport { createSelector } from 'reselect';\r\nimport { SET_SELECTED_CITY } from '../constants/actions_constans';\r\n\r\nexport default (state = '', action) => {\r\n  switch (action.type) {\r\n    case SET_SELECTED_CITY:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst fromObjToArray = (cities) => toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather }));\r\n\r\nexport const getWeatherCities = createSelector(\r\n  (state) => fromObjToArray(state),\r\n  (cities) => cities,\r\n);\r\n","import { createSelector } from 'reselect';\r\nimport { SET_FORECAST_DATA, SET_WEATHER_CITY, GET_WEATHER_CITY } from '../constants/actions_constans';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_FORECAST_DATA: {\r\n      const { city, forecastData } = action.payload;\r\n      return {\r\n        ...state,\r\n        [city]: { ...state[city], forecastData, forecastDataDate: new Date() },\r\n      };\r\n    }\r\n    case GET_WEATHER_CITY: {\r\n      const city = action.payload;\r\n      return { ...state, [city]: { ...state[city], weather: null } };\r\n    }\r\n    case SET_WEATHER_CITY: {\r\n      const { city, weatherData } = action.payload;\r\n      return { ...state, [city]: { ...state[city], weather: weatherData } };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const forecastDataSelector = createSelector(\r\n  (state, city) => state[city] && state[city].forecastData,\r\n  (forecastData) => forecastData,\r\n);\r\n","import { combineReducers } from 'redux';\r\nimport { createSelector } from 'reselect';\r\nimport setSelectedCityReducer, { getWeatherCities as _getWeatherCities } from './setSelectedCityReducer';\r\nimport setForecastDataReducer, { forecastDataSelector as _forecastDataSelector } from './setForecastDataReducer';\r\n\r\nexport default combineReducers({ selectedCity: setSelectedCityReducer, cities: setForecastDataReducer });\r\n\r\nexport const selectedCitySelector = createSelector(\r\n  (state) => state.selectedCity,\r\n  (selectedCity) => selectedCity,\r\n);\r\n\r\nexport const forecastDataSelector = createSelector(\r\n  (state) => state.cities,\r\n  selectedCitySelector,\r\n  _forecastDataSelector,\r\n);\r\n\r\nexport const getWeatherCities = createSelector((state) => state.cities, _getWeatherCities);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { LocationList } from '../components';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions';\r\nimport { getWeatherCities } from '../reducers';\r\n\r\nclass LocationListContainer extends Component {\r\n  componentDidMount() {\r\n    const { getWeather, cities } = this.props;\r\n    getWeather(cities);\r\n  }\r\n\r\n  handleSelectedLocation = (city) => {\r\n    this.props.getForecastData(city);\r\n  };\r\n\r\n  render() {\r\n    return <LocationList cities={this.props.citiesWeather} onSelectedLocation={this.handleSelectedLocation} />;\r\n  }\r\n}\r\n\r\nLocationListContainer.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  citiesWeather: PropTypes.array,\r\n  getForecastData: PropTypes.func.isRequired,\r\n  getWeather: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  citiesWeather: getWeatherCities(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(actions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ForecastExtended } from '../components';\r\nimport { connect } from 'react-redux';\r\nimport { selectedCitySelector } from '../reducers';\r\nimport { forecastDataSelector } from '../reducers';\r\n\r\nclass ForecastExtendedContainer extends Component {\r\n  render() {\r\n    const { selectedCity, forecastData } = this.props;\r\n    return <ForecastExtended key={selectedCity} city={selectedCity} forecastData={forecastData} />;\r\n  }\r\n}\r\n\r\nForecastExtendedContainer.propTypes = {\r\n  selectedCity: PropTypes.string.isRequired,\r\n  forecastData: PropTypes.array,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedCity: selectedCitySelector(state),\r\n  forecastData: forecastDataSelector(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ForecastExtendedContainer);\r\n","import React, { Component } from 'react';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport { AppBar, Typography, Toolbar, Paper } from '@material-ui/core';\r\nimport { LocationListContainer, ForecastExtendedContainer } from './containers';\r\nimport { Hour } from './components/_MyComponents';\r\nimport './App.css';\r\n\r\nconst cities = [\r\n  'Barcelona,es',\r\n  'Bogota,col',\r\n  'Buenos Aires,ar',\r\n  'Lima,pe',\r\n  'Madrid,es',\r\n  'Mexico,mex',\r\n  'Santiago,cl',\r\n  'Washington,us',\r\n];\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Grid>\r\n          <Row>\r\n            <AppBar position=\"sticky\">\r\n              <Toolbar>\r\n                <Typography variant=\"h4\" color=\"inherit\" style={{ flexGrow: 1 }}>\r\n                  Weather App\r\n                </Typography>\r\n                <Hour />\r\n              </Toolbar>\r\n            </AppBar>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12} md={6}>\r\n              <LocationListContainer cities={cities} />\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n              <Paper elevation={4}>\r\n                <div className=\"details\">\r\n                  <ForecastExtendedContainer />\r\n                </div>\r\n              </Paper>\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport reducers from '../reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst initialState = { selectedCity: '', cities: {} };\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}